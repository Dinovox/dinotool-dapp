import React, { useMemo, useRef } from 'react';
import { QRCodeSVG } from 'qrcode.react';

const THEME = {
  aquaLight: '#CFF4F6',
  aqua: '#A6E7EB',
  textDark: '#1F3A3D',
  badgeBg: 'rgba(255,255,255,.75)',
  innerStroke: 'rgba(255,255,255,.65)',
  accentYellow: '#FFE762',
  borderBack: '#D9F0F2'
};

type QRItem = { code: string; amount: number; styleParam?: string };

type Props = {
  items: QRItem[];
  claimBaseUrl?: string;
  pageSize?: 'A4' | 'Letter';
  orientation?: 'portrait' | 'landscape';
  marginMm?: number;
  gapMm?: number;
  title?: string;
  // verso
  withBack?: boolean; // imprimer le dos
  flipEdge?: 'long' | 'short' | 'none'; // rotation du dos (180¬∞ si 'short')
};

export const PrettyQRCardsPrintDuplex: React.FC<Props> = ({
  items,
  claimBaseUrl = 'https://poxp.xyz/claim/',
  pageSize = 'A4',
  orientation = 'portrait',
  marginMm = 7,
  gapMm = 3,
  title = 'QR Codes',
  withBack = true,
  flipEdge = 'long'
}) => {
  const ref = useRef<HTMLDivElement>(null);

  // --- layout page & grille (cartes FIXES 50√ó60 mm) ---
  const layout = useMemo(() => {
    const map = { A4: { w: 210, h: 297 }, Letter: { w: 216, h: 279 } };
    const base = map[pageSize];
    const isLandscape = orientation === 'landscape';
    const w = isLandscape ? base.h : base.w;
    const h = isLandscape ? base.w : base.h;
    const innerW = w - 2 * marginMm;
    const innerH = h - 2 * marginMm;

    const cardW = 50; // 5 cm
    const cardH = 65; // 6 cm

    const cols = Math.max(1, Math.floor((innerW + gapMm) / (cardW + gapMm)));
    const rows = Math.max(1, Math.floor((innerH + gapMm) / (cardH + gapMm)));
    const perPage = cols * rows;

    return {
      w,
      h,
      innerW,
      innerH,
      cols,
      rows,
      perPage,
      cardW,
      cardH,
      isLandscape
    };
  }, [pageSize, orientation, marginMm, gapMm]);

  // util mm ‚Üí px (approx 96dpi)
  const mm2px = (mm: number) => Math.round(mm * 3.78);

  // tailles fixes internes pour √©viter tout d√©bordement
  const qrSizePx = mm2px(30); // QR de 30 mm de c√¥t√©
  const css = useMemo(
    () => ` @page { size: ${pageSize} ${orientation}; margin: ${marginMm}mm; }
  html, body {
    padding:0; margin:0;
    -webkit-print-color-adjust: exact; print-color-adjust: exact;
    font-family: "Inter", ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Arial;
  }

  .sheet { width:${layout.innerW}mm; margin:0 auto; page-break-after: always; }
  .grid {
    display:grid;
    grid-template-columns: repeat(${layout.cols}, ${layout.cardW}mm);
    grid-template-rows: repeat(${layout.rows}, ${layout.cardH}mm);
    gap:${gapMm}mm;
    justify-content:start; align-content:start;
  }

  /* --- RECTO --- */
  .card, .back-card {
    width:${layout.cardW}mm; height:${layout.cardH}mm;
    border-radius:4mm; position:relative; overflow:hidden;
    page-break-inside:avoid; break-inside:avoid;
    display:flex; flex-direction:column; align-items:center;
    padding:3mm 3mm 2.5mm; box-sizing:border-box;
  }

  .card {
    background: linear-gradient(180deg, ${THEME.aquaLight} 0%, ${THEME.aqua} 100%);
    box-shadow: 0 1mm 3mm rgba(0,0,0,.10);
  }
  .card::after {
    content:''; position:absolute; inset:1.2mm;
    border:0.5mm solid ${THEME.innerStroke}; border-radius:3mm; pointer-events:none;
  }

  /* bandeau ‚Äústicker‚Äù jaune fa√ßon Dinovox */
.tape {
  background: ${THEME.accentYellow};
  color: ${THEME.textDark};
  font-weight: 800;
  font-size: 9pt;
  letter-spacing: .2px;
  padding: 1mm 3mm;
  border-radius: 1mm;
  box-shadow: 0 .6mm 1.8mm rgba(0,0,0,.08);
  transform: rotate(-1.5deg);
  margin-bottom: 2mm; /* <-- espace sous le bandeau */
}

  .host {
    margin-top: 11mm; /* sous le bandeau */
    font-weight:800; font-size:10pt; color:${THEME.textDark};
    text-transform: lowercase; letter-spacing:.3px; /* rappel typographique du site */
  }

  .qr-wrap { background:#fff; border-radius:2mm; padding:1.2mm; box-shadow:0 .6mm 2mm rgba(0,0,0,.06); }

  .code-badge {
    margin: 1.6mm 0 1.2mm;
    font-weight:800; font-size:10pt; color:${THEME.textDark};
    background: ${THEME.badgeBg}; padding: 1mm 2.4mm; border-radius: 1.8mm;
    text-align:center; word-break: break-all; max-width: 100%;
  }

  .meta {
    font-size:8.5pt; color:${THEME.textDark}; text-align:center;
    background: ${THEME.badgeBg}; padding:1mm 2mm; border-radius:1.6mm;
    max-width:100%;
  }

  .steps {
    margin-top: auto;
    font-size:7.2pt; color:${THEME.textDark}; text-align:center; line-height:1.22;
    white-space:pre-line;
  }

  /* --- VERSO --- */
  .back-card {
    background:#fff; border:0.4mm solid ${THEME.borderBack};
  }
  .back-title { font-weight:800; color:${THEME.textDark}; font-size:10pt; margin:0 0 2mm; text-align:center; }
  .back-qr-wrap { background:#fff; border:0.6mm dashed ${THEME.aqua}; border-radius:2mm; padding:0mm; }
  .back-steps { font-size:8.2pt; color:${THEME.textDark}; text-align:center; line-height:1.25; margin-top:0mm; white-space:pre-line; }

  .rotate180 { transform: rotate(180deg); }

  @media print {
    .no-print { display:none !important; }
    .card { box-shadow:none; }
  }
  `,
    [pageSize, orientation, marginMm, gapMm, layout]
  );

  // pagination
  const pages: QRItem[][] = [];
  for (let i = 0; i < items.length; i += layout.perPage) {
    pages.push(items.slice(i, i + layout.perPage));
  }

  const handlePrint = () => {
    if (!ref.current) return;
    printHtmlIsolated(ref.current.innerHTML, css, title);
  };

  return (
    <div>
      <div
        className='no-print'
        style={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          marginBottom: 12
        }}
      >
        <h3 style={{ margin: 0 }}>{title}</h3>
        <button
          onClick={handlePrint}
          style={{
            padding: '8px 14px',
            borderRadius: 8,
            border: '1px solid #cbd5e1',
            cursor: 'pointer',
            background: '#fff'
          }}
        >
          üñ®Ô∏è Imprimer
        </button>
      </div>

      <div ref={ref} className='hidden'>
        {/* --- RECTO --- */}
        {pages.map((slice, p) => (
          <div className='sheet' key={`front-${p}`}>
            <div className='grid'>
              {slice.map((it, idx) => {
                const url = `${claimBaseUrl}${it.code}`;
                const urlWithStyle = it.styleParam
                  ? `${url}?${it.styleParam}`
                  : url;
                const host =
                  url.replace(/^https?:\/\//, '').split('/')[0] || 'poxp.xyz';
                const id = url.split('/claim/')[1] || it.code;

                return (
                  <div className='card' key={`${it.code}-f-${idx}`}>
                    <div className='tape'>{host}</div>
                    <div className='qr-wrap'>
                      <QRCodeSVG
                        value={urlWithStyle}
                        size={qrSizePx}
                        level='M'
                      />
                    </div>
                    <div className='code-badge'>{id}</div>
                    <div className='meta'>
                      {it.amount > 1
                        ? `Chaque code peut √™tre r√©clam√© ${it.amount} fois.`
                        : 'Code utilisable une seule fois.'}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        ))}

        {/* --- VERSO (optionnel) --- */}
        {withBack &&
          pages.map((slice, p) => (
            <div
              className={`sheet ${flipEdge === 'short' ? 'rotate180' : ''}`}
              key={`back-${p}`}
            >
              <div className='grid'>
                {slice.map((it, idx) => {
                  // QR ‚Äúinstaller xPortal‚Äù (remplace si tu veux un deep link)
                  const xPortalUrl = 'https://xport.al/referral/nggqcqggkm'; // ou stores
                  return (
                    <div className='back-card' key={`${it.code}-b-${idx}`}>
                      <div className='back-title'>Instructions</div>
                      <div className='back-qr-wrap'>
                        <QRCodeSVG
                          value={xPortalUrl}
                          size={qrSizePx}
                          level='M'
                        />
                      </div>
                      <div className='back-steps'>{`
                      Recevez votre NFT :
                      1) Installez xPortal
                      2) Visitez app.dinovox.com
                      3) Connectez-vous via xPortal
                      4) Scannez le code
                      `}</div>
                    </div>
                  );
                })}
              </div>
            </div>
          ))}
      </div>
    </div>
  );
};

/* Impression isol√©e via iframe (fiable) */
function printHtmlIsolated(html: string, css: string, docTitle: string) {
  const iframe = document.createElement('iframe');
  iframe.style.position = 'fixed';
  iframe.style.width = '0';
  iframe.style.height = '0';
  iframe.style.border = '0';
  document.body.appendChild(iframe);

  const esc = (s: string) =>
    s.replace(
      /[&<>"']/g,
      (m) =>
        ({
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;'
        })[m]!
    );

  const doc = iframe.contentDocument!;
  doc.open();
  doc.write(`<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>${esc(docTitle)}</title>
  <style>${css}</style>
</head>
<body>${html}</body>
</html>`);
  doc.close();

  const run = async () => {
    try {
      await (doc as any).fonts?.ready;
    } catch {}
    const imgs = Array.from(doc.images);
    await Promise.all(
      imgs.map(
        (img) =>
          new Promise<void>((res) => {
            if (img.complete) return res();
            img.onload = () => res();
            img.onerror = () => res();
          })
      )
    );
    iframe.contentWindow!.focus();
    iframe.contentWindow!.print();
    setTimeout(() => document.body.removeChild(iframe), 1200);
  };
  if (doc.readyState === 'complete') run();
  else iframe.onload = () => run();
}
